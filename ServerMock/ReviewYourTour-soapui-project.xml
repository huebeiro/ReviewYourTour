<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e08da2df-b532-4414-94f2-0c9367b5e540" activeEnvironment="Default" name="ReviewYourTour" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="540906f3-446f-496c-8d09-8f94a1f3060d" port="8080" path="/" host="Adilsons-MacBook-Air.local" name="MainService"><con:settings/><con:properties/><con:restMockAction name="/reviews" method="GET" resourcePath="/reviews" id="1c3e669e-cbd3-49c1-a6ec-46babba7f389"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="MainResponse" id="0f567a9f-afb1-4c9e-82f9-88c9e5fd166a" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "status": true,
    "total_reviews_comments": 461,
    "data": [
        {
            "review_id": 2169729,
            "rating": "5.0",
            "title": "Excellent tour",
            "message": "This was a great tour and a highlight of my trip to Berlin. The meeting point was easily accessible, tour guide engaging and informative. The tour took us through parts of the building (it&amp;#039;s so huge it&amp;#039;s impossible to do it all) and uncovered its history, architecture and usage during the Nazi period, WWII and the Cold War, taking in main areas of the airport and added extras such as the roof and basements and bunkers. A great tour for anyone who appreciates architecture and the history of this incredible city. Highly recommend.",
            "author": "Joe – United Kingdom",
            "foreignLanguage": false,
            "date": "March 28, 2018",
            "date_unformatted": {},
            "languageCode": "en",
            "traveler_type": "friends",
            "reviewerName": "Joe",
            "reviewerCountry": "United Kingdom"
        },
        {
            "review_id": 2165685,
            "rating": "5.0",
            "title": null,
            "message": "sehr interessant und empfehlenswert",
            "author": "Claudia – Austria",
            "foreignLanguage": true,
            "date": "March 27, 2018",
            "date_unformatted": {},
            "languageCode": "de",
            "traveler_type": null,
            "reviewerName": "Claudia",
            "reviewerCountry": "Austria"
        },
        {
            "review_id": 2157972,
            "rating": "5.0",
            "title": "",
            "message": "Die Reise zum ehrwürdigen Flughafen war super , besonders Frau Knap hat es super gemacht.\nWeiter so !!",
            "author": "Michael – Germany",
            "foreignLanguage": true,
            "date": "March 26, 2018",
            "date_unformatted": {},
            "languageCode": "de",
            "traveler_type": "couple",
            "reviewerName": "Michael",
            "reviewerCountry": "Germany"
        }
   ]
}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/reviews" method="POST" resourcePath="/reviews" id="2e03b1fd-8ec5-4efb-a686-bc10c7994869"><con:settings/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="CreatedResponse" id="db7246c4-a43e-431c-af6a-887c9bae81aa" httpResponseStatus="201" mediaType="application/json"><con:settings/><con:responseContent>{}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>